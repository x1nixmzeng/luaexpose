// From a Lua C++ binding example
// See https://gist.github.com/1594905

class Foo
{
	const char *m_name;

	public:
		Foo( const char *name )
			: m_name( name )
		{
			printf("Foo %s is born\n", m_name);
		}

		int Add(int a, int b)
		{
			return( a+b );
		}

		~Foo( )
		{
			printf("Foo %s has gone!\n", m_name );
		}
};

int l_Foo_constructor(lua_State * l)
{
	const char * name = luaL_checkstring(l, 1);

	Foo ** udata = (Foo **)lua_newuserdata(l, sizeof(Foo *));
	*udata = new Foo(name);

	luaL_getmetatable(l, "luaL_Foo");
	lua_setmetatable(l, -2);

	return 1;
}

Foo * l_CheckFoo(lua_State * l, int n)
{
	 return *(Foo **)luaL_checkudata(l, n, "luaL_Foo");
}

int l_Foo_add(lua_State * l)
{
	Foo * foo = l_CheckFoo(l, 1);

	int a = luaL_checknumber(l, 2);
	int b = luaL_checknumber(l, 3);

	lua_pushnumber( l, foo->Add( a, b ) );

	return 1;
}

int l_Foo_destructor(lua_State * l)
{
	Foo * foo = l_CheckFoo(l, 1);
	delete foo;

	return 0;
}

extern "C"
{
	luaL_Reg sFooRegs[] =
	{
		{ "new", l_Foo_constructor },
		{ "add", l_Foo_add },
		{ "__gc", l_Foo_destructor },
		{ NULL, NULL }
	};

	void registerSprite(lua_State *l)
	{
		luaL_newmetatable(l, "luaL_Foo");
		luaL_register(l, 0, sFooRegs);
		lua_pushvalue(l, -1);
		lua_setfield(l, -1, "__index");
		lua_setglobal(l, "Foo");
	}


}